services:
  project: 
    build: 
      context: ./backend-services/organization
      dockerfile: Dockerfile
      target: dev   
    image: neka-backend-project
    command: npm run start:dev
    restart: always
    depends_on:
      - neka-db
    ports:
      - "5001:3000"
    develop:
      watch:
        - action: sync
          path: ./backend-services/organization
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  wiki: 
    build: 
      context: ./backend-services/wiki
      dockerfile: Dockerfile
      target: dev
    image: neka-backend-wiki
    command: npm run start:dev
    restart: always
    depends_on:
      - neka-db
    ports:
      - "5004:3000"
    develop:
      watch:
        - action: sync
          path: ./backend-services/wiki
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  team: 
    build: 
      context: ./backend-services/team
      dockerfile: Dockerfile
      target: dev
    image: neka-backend-team
    command: npm run start:dev
    restart: always
    depends_on:
      - neka-db
    ports:
      - "5005:3000"
    develop:
      watch:
        - action: sync
          path: ./backend-services/team
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
  
  user: 
    build: 
      context: ./backend-services/users
      dockerfile: Dockerfile
      target: dev
    image: neka-backend-users
    command: npm run start:dev
    restart: always
    depends_on:
      - neka-db
    ports:
      - "5003:3000"
    develop:
      watch:
        - action: sync
          path: ./backend-services/users
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  gateway: 
    build: 
      context: ./gateway
      dockerfile: Dockerfile
      target: dev      
    image: neka-backend-gateway
    command: npm run start:dev
    restart: always
    depends_on:
      - project
      - team
      - issues
      - user
      - wiki
    ports:
      - "5007:3000"
    develop:
      watch:
        - action: sync
          path: ./gateway
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
  
  issues: 
    build: 
      context: ./backend-services/issues
      dockerfile: Dockerfile
      target: dev      
    image: neka-backend-issues
    command: npm run start:dev
    restart: always
    depends_on:
      - neka-db
    ports:
      - "5006:3000"
    develop:
      watch:
        - action: sync
          path: ./backend-services/issues
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  data-access: 
    build: 
      context: ./backend-services/data-access
      dockerfile: Dockerfile
      target: dev     
    image: neka-backend-data-access
    command: npm run start:dev
    restart: always
    depends_on:
      - neka-db
    ports:
      - "5002:3000"
    environment:
      DB_HOST: neka-db
      DB_PORT: 3306
      DB_USERNAME: marius
      DB_PASSWORD: root
      DB_NAME: thot
    develop:
      watch:
        - action: sync
          path: ./backend-services/data-access
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
  
  neka-db: 
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=marius
      - POSTGRES_DB=neka
    volumes:
      - postgres_data:/var/lib/pgsql/data
  
  # neka-otel-collector:
  #   image: otel/opentelemetry-collector:0.86.0
  #   command: [ "--config=/etc/otel-collector.yaml" ]
  #   volumes:
  #     - ./monitoring/otel-collector.yaml:/etc/otel-collector.yaml
  #   ports:
  #     - "4317"  # otlp grpc
  #     - "4318"  # otlp http

  # neka-tempo:
  #   image: grafana/tempo:latest
  #   command: [ "-config.file=/etc/tempo.yaml" ]
  #   volumes:
  #     - ./monitoring/tempo-config.yaml:/etc/tempo.yaml
  #     - tempo-data:/tmp/tempo
  #   ports:
  #     - "14268"  # jaeger ingest
  #     - "3200"   # tempo
  #     - "9411"   # zipkin

  tracing:
    image: jaegertracing/all-in-one:latest
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 4317:4317
      - 4318:4318
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 9411:9411
    restart: unless-stopped

  neka-grafana:
    image: grafana/grafana-oss:latest
    user: "0:0"
    container_name: neka-grafana
    ports:
      - "4000:4000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana.ini:/etc/grafana/grafana.ini
      - /etc/letsencrypt:/etc/letsencrypt
    restart: unless-stopped
volumes:
  postgres_data:
  tempo-data:
  grafana-data: